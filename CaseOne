import networkx as nx
import matplotlib.pyplot as plt

#测试用例
my_list={(1,4,1),(1,6,1),(2,4,1),(2,6,1),(3,4,1),(3,5,1),(3,6,1),
         (4,7,2),(4,8,2),(5,7,2),(5,8,2),(5,9,2),(6,9,2),(6,8,2),(6,7,2),(7,10,3),(7,11,3),(7,12,3),}


graph = nx.Graph()
layer_directory = {}  # key:layer_name value:[nodes],nodes为层节点，例如在操作(A,B,1)时会将A放入1层，B放入二层
edge_listTH = []      # 只包含节点序列的list
pos={}                # 每个点在画图时的位置

def graph_maker(layers,edge_list):  #制作网  edge_list内元组结构(nodeT,nodeH,edge_layer)
                                    #                                     edge_layer表示边属于的层数
                                    #                                     eg:  nodeT=A是第一层的节点,nodeH=B属于二层有(A,B,1)
    if layers >= 2:

        for edge in edge_list:                              # 在边列表中遍历所有边
            #print(edge)
            if edge[2] in layer_directory.keys():           # edge[0]=nodeT,edge[1]=nodeH,edge[2]=edge_layer
                if edge[0] not in layer_directory[edge[2]]: # 防止节点重复加入所属key的列表
                    layer_directory[edge[2]].append(edge[0])
            else:
                layer_directory[edge[2]] = [edge[0]]        # 首次加入的edge_layer

            if edge[2]+1 in layer_directory.keys():
                if edge[1] not in layer_directory[edge[2]+1]:
                    layer_directory[edge[2]+1].append(edge[1])
            else:
                layer_directory[edge[2]+1] = [edge[1]]

        for item in range( len(layer_directory)):
            if item+1  in layer_directory.keys():           # 层数从一开始
                graph.add_nodes_from(layer_directory[item+1],layer=item+1)

        for edge in edge_list:
            edge_listTH.append((edge[0],edge[1]))

        graph.add_edges_from(edge_listTH)

graph_maker(3,my_list)

'''
print("--------------------------------------------------------")
for key, value in layer_directory.items():
    print("字典输出：")
    print(f"{key}: {value}")
'''

for item in range(len(layer_directory)):
    if item + 1 in layer_directory.keys():
        for i, node in enumerate(layer_directory[item+1]):
            pos[node] = (item, i)                           # 确定节点位置，同层按照遍历的先后顺序从上到下排序

'''
print("--------------------------------------------------------")
print("节点位置输出：")
for key, value in pos.items():
    print(f"{key}: {value}")
'''

# 确保所有节点都有位置,防止傻逼瞎输入，如果错误输入，保证能画出图，但是是错误的图
for node in graph.nodes():
    if node not in pos:
        pos[node] = (len(layer_directory), 0)  # 位置默认

# 绘制图形
plt.figure(figsize=(12, 10)) #大小可调整
nx.draw(graph, pos, with_labels=True, node_color='lightblue', node_size=500, edge_color='gray')

plt.title("Custom Layered Graph Layout")
plt.show()

